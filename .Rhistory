#Bibliotecas e Pacotes a serem utilizados
pacotes <- c("plotly","tidyverse","ggrepel","sjPlot","knitr","kableExtra",
"FactoMineR","cabootcrs")
#Iniciando os pacotes para utilização
library(plotly)
library(tidyverse)
library(ggrepel)
library(sjPlot)
library(knitr)
library(kableExtra)
library(FactoMineR)
library(cabootcrs)
#Chamando a base
base_diabete_full <- read.csv("C:/Users/bruno/Desktop/diabetes_data_upload.csv",
stringsAsFactors=TRUE)
View(base_diabete_full)
#Chamando a base de dados e visualizando os primeiros registros
head(base_diabete_full, n=10) %>%
kable() %>%
kable_styling(bootstrap_options = "basic" ,
full_width = TRUE,
position = "center",
html_font = "Calibri Light",
font_size = 16)
#Estudando as propriedades do data frame com glimpse e summary
glimpse(base_diabete_full)
summary(base_diabete_full)
#Implementando a ACM na base completa para considerações iniciais
base_ACM_full <- MCA(base_diabete_full[, 2:17])
#Criando o base_ACM_mp para alocar as coordenadas da matriz em data frame
categorias <- apply(base_diabete_full[, 2:17],
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
base_ACM_mp <- data.frame(base_ACM_full$var$coord, Variável = rep(names(categorias), categorias))
#Plotando o Mapa perceptual:
base_ACM_mp %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
ggplot(aes(x = Dim.1,
y = Dim.2,
label = Categoria,
color = Variável,
shape = Variável
)) +
geom_point() +
geom_label_repel() +
geom_vline(aes(xintercept = 0), linetype = "dashed", color = "grey") +
geom_hline(aes(yintercept = 0), linetype = "dashed", color = "grey") +
labs(x = paste("Dimensão 1:", paste0(round(base_ACM_full$eig[1,2], 2), "%")),
y = paste("Dimensão 2:", paste0(round(base_ACM_full$eig[2,2], 2), "%"))) +
scale_color_hue() +
theme(panel.background = element_rect("#A3E4F3"),
panel.border = element_rect("NA"),
panel.grid = element_line("#D3F2F9"),
plot.background = element_rect("#F2F2F2"),
legend.position = "none")
#Selecionando as categorias que se mostraram "próximas" da categoria de
#interesse: class = Positive
base_diabete <- base_diabete_full[, c(3,4,5,7,8,17)]
print(base_diabete)
summary(base_diabete)
#Renomeando (e traduzindo) colunas para evitar problemas no modelo
base_diabete <- rename(base_diabete,
Poliuria = "Polyuria",
Polidipsia = "Polydipsia",
PPR = "sudden.weight.loss",
Polifagia = "Polyphagia",
AG = "Genital.thrush",
Resultado = "class")
print(base_diabete)
summary(base_diabete)
#Resultado x Poliúria
tabcontig_poliuria <- table(base_diabete$Resultado, base_diabete$Poliuria)
tabcontig_poliuria
qui2_poliuria <- chisq.test(tabcontig_poliuria)
if (qui2_poliuria$p.value <= 0.05){
print(tabcontig_poliuria)
print(qui2_poliuria)
print("EXISTE ASSOCIAÇÃO ENTRE AS VARIÁVEIS")
} else {
print(tabcontig_poliuria)
print(qui2_poliuria)
print("NÃO EXISTE ASSOCIAÇÃO ENTRE AS VARIÁVEIS")
}
#Resultado x Polidipsia
tabcontig_polidipsia <- table(base_diabete$Resultado, base_diabete$Polidipsia)
tabcontig_polidipsia
qui2_polidipsia <- chisq.test(tabcontig_polidipsia)
if (qui2_polidipsia$p.value <= 0.05){
print(tabcontig_polidipsia)
print(qui2_polidipsia)
print("EXISTE ASSOCIAÇÃO ENTRE AS VARIÁVEIS")
} else {
print(tabcontig_polidipsia)
print(qui2_polidipsia)
print("NÃO EXISTE ASSOCIAÇÃO ENTRE AS VARIÁVEIS")
}
#Resultado x PPR
tabcontig_PPR <- table(base_diabete$Resultado, base_diabete$PPR)
tabcontig_PPR
qui2_PPR <- chisq.test(tabcontig_PPR)
if (qui2_PPR$p.value <= 0.05){
print(tabcontig_PPR)
print(qui2_PPR)
print("EXISTE ASSOCIAÇÃO ENTRE AS VARIÁVEIS")
} else {
print(tabcontig_PPR)
print(qui2_PPR)
print("NÃO EXISTE ASSOCIAÇÃO ENTRE AS VARIÁVEIS")
}
#Resultado x Polifagia
tabcontig_polifagia <- table(base_diabete$Resultado, base_diabete$Polifagia)
tabcontig_polifagia
qui2_polifagia <- chisq.test(tabcontig_polifagia)
if (qui2_polifagia$p.value <= 0.05){
print(tabcontig_polifagia)
print(qui2_polifagia)
print("EXISTE ASSOCIAÇÃO ENTRE AS VARIÁVEIS")
} else {
print(tabcontig_polifagia)
print(qui2_polifagia)
print("NÃO EXISTE ASSOCIAÇÃO ENTRE AS VARIÁVEIS")
}
#Resultado x AG
tabcontig_AG <- table(base_diabete$Resultado, base_diabete$AG)
tabcontig_AG
qui2_AG <- chisq.test(tabcontig_AG)
if (qui2_AG$p.value <= 0.05){
print(tabcontig_AG)
print(qui2_AG)
print("EXISTE ASSOCIAÇÃO ENTRE AS VARIÁVEIS")
} else {
print(tabcontig_AG)
print(qui2_AG)
print("NÃO EXISTE ASSOCIAÇÃO ENTRE AS VARIÁVEIS")
}
#Criando o novo objeto ACM (base_ACM) com a base ajustada
base_ACM <- MCA(base_diabete[, 1:6])
#Criando a base_ACM_mp1 para alocar as coordenadas da matriz em data frame
categorias1 <- apply(base_diabete[, 1:6],
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
base_ACM_mp1 <- data.frame(base_ACM$var$coord, Variável = rep(names(categorias1), categorias1))
#Plotando o novo Mapa perceptual
base_ACM_mp1 %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
ggplot(aes(x = Dim.1,
y = Dim.2,
label = Categoria,
color = Variável,
shape = Variável
)) +
geom_point() +
geom_label_repel() +
geom_vline(aes(xintercept = 0), linetype = "dashed", color = "grey") +
geom_hline(aes(yintercept = 0), linetype = "dashed", color = "grey") +
labs(title = "Mapa Perceptual semifinal",
colours = "Cylinders",
x = paste("Dimensão 1:", paste0(round(base_ACM$eig[1,2], 2), "%")),
y = paste("Dimensão 2:", paste0(round(base_ACM$eig[2,2], 2), "%"))) +
scale_color_hue() +
theme(panel.background = element_rect("#A3E4F3"),
panel.border = element_rect("NA"),
panel.grid = element_line("#D3F2F9"),
plot.background = element_rect("#F2F2F2"),
legend.position = "none")
base_Burt <- MCA(base_diabete[], method = "Burt")
#Percentual de variância por dimensão:
base_Burt$eig
#Criando um Mapa perceptual tridimensional
base_final_3D <- plot_ly()
base_final_3D <- add_trace(p = base_final_3D,
x = base_ACM_mp1[,1],
y = base_ACM_mp1[,2],
z = base_ACM_mp1[,3],
mode = "text",
text = rownames(base_ACM_mp1),
textfont = list(color = "#1F8195"),
showlegend = TRUE,
inherit = TRUE)
base_final_3D <- layout(p = base_final_3D,
scene = list(xaxis = list(title = "1ª Dimensão"),
yaxis = list(title = "2ª Dimensão"),
zaxis = list(title = "3ª Dimensão"),
aspectmode = "data"))
base_final_3D
